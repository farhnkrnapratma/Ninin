import greenfoot.*;  // imports Actor, World, Greenfoot, GreenfootImage

import java.util.Random;

public class JumpNRun extends World
{
    public final int TILESIZE = 20;
    private Actor dummy = new dummy();
    private Player Player = new Player(this);
    

    
    public int Level = 1;
    public int Coins = 0;
    public int Objects = 0;
    private boolean maploaded = false;
    private boolean Allobjectsdestroyed = false;
    private boolean retry = false;

    /**
     *  Nummer Bedeutung :
     *  
     *  0 - Kein Object
     *  1 - Solider Block
     *  2 - siehe 1 + es befindet sich Grass auf dem Block
     *  3 - Falle, Spike
     *  4 - Bewegbare Box
     *  5 - Spawnpunkt, Spieler
     *  6 - Mï¿½nze, Coin
     *  7 - Gegner, Enemy ( 100% Geschw)
     *  8 - Gegner, Enemy ( 150% Geschw)
     *  8<- nichts 
     */
    private int[][] LVL_data = {
     { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,6,0,0,0,7,6,0,0,0,6,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1, },
     { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1, },
     { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1  }
    };
    
    
    public void ReloadLevel()
    {
        retry = true;
    }
    /**
     * Create the crab world (the beach). Our world has a size 
     * of 560x560 cells, where every cell is just 1 pixel.
     */
    public JumpNRun() 
    {
        
        super(20 * 28, 20 * 28, 1/*, true*/);
        Greenfoot.setSpeed(50);
        
        //ChangeLevel(2);
        
        GenerateLevel();
    }
    
    /**
     * Diese Funktion wird das array "LVL_data" anhand des levels  ndern
     */
    public void ChangeLevel(int level)
    {
        
        switch(level)
        {
            case 2 :
                int[][] LVL = {
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0, },
                { 2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2, },
                { 1,1,1,1,1,1,3,3,3,3,3,0,0,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1, },
                { 1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, },
                { 1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1, },
                { 1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,6,0,0,0,1,1,1,1, },
                { 1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1, },
                { 1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1, },
                { 1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1, },
                { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 }
               
            };
            
            // Level wird gewechselt
            for (int i = 0; i < 28; i++)
                for (int j = 0;j < 28;j++)
                LVL_data[i][j] = LVL[i][j];
            
            break;
            case 3 :
            int[][] LVL3 = {
                { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, },
                { 1,4,4,4,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,4,4,4,4,4,1,0, },
                { 1,4,4,1,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,4,4,4,1,0,0, },
                { 1,4,1,0,0,0,0,0,0,0,0,1,7,7,0,0,1,0,0,0,0,0,1,4,1,0,0,0, },
                { 1,1,0,0,4,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0, },
                { 1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 1,0,0,0,0,0,0,0,4,7,0,4,7,0,4,7,0,4,7,0,4,7,0,4,0,0,0,0, },
                { 1,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0, },
                { 1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,1, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,1, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,1, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,4,4,4,1, },
                { 1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,1, },
                { 1,4,4,4,1,0,0,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1, },
                { 1,4,4,4,1,0,0,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1, },
                { 1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,4,1, },
                { 1,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,4,1, },
                { 1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,4,4,4,4,1, },
                { 1,4,4,4,4,4,4,4,4,4,4,1,0,0,0,6,6,6,6,0,0,0,1,4,4,4,4,1, },
                { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 }
               
            };
            
            // Level wird gewechselt
            for (int i = 0; i < 28; i++)
                for (int j = 0;j < 28;j++)
                LVL_data[i][j] = LVL3[i][j];
          
            break;
            case 4 :
            int[][] LVL4 = {
                { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, },
                { 1,5,0,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,0,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,0,4,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,0,4,0,0,0,6,6,6,6,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,0,4,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1, },
                { 1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1, },
                { 1,1,4,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1, },
                { 1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1, },
                { 1,1,4,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,0,1, },
                { 1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1, },
                { 1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1, },
                { 1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1, },
                { 1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1, },
                { 1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1, },
                { 1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1, },
                { 1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1, },
                { 1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1, },
                { 1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1, },
                { 1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1, },
                { 1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1, },
                { 1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1, },
                { 1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1, },
                { 1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1, },
                { 1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 }
               
            };
            
            // Level wird gewechselt
            for (int i = 0; i < 28; i++)
                for (int j = 0;j < 28;j++)
            LVL_data[i][j] = LVL4[i][j];
            
            break;
            case 5 :
            int[][] LVL5 = {
                { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,6,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,1, },
                { 1,2,2,1,2,2,0,0,0,7,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,1, },
                { 1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1, },
                { 1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,6,6,0,1,0,0,0,0,1, },
                { 1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,2,2,0,1,0,0,0,0,1, },
                { 1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1, },
                { 1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,2,1, },
                { 1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,2,2,0,0,0,1,0,0,0,0,1, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1, },
                { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,0,0,0,0,1, },
                { 1,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1, },
                { 1,0,0,0,0,0,6,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1, },
                { 1,0,0,0,0,0,0,6,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,6,6,6,0,0,0,0,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,2,2,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1, },
                { 1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, },
                { 1,0,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,1, },
                { 1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,6,6,6,6,1,1,0,1, },
                { 1,0,0,0,0,0,0,1,1,0,0,2,2,2,2,2,2,2,2,6,6,6,6,6,6,1,0,1, },
                { 1,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,0,0,1,6,6,6,6,6,6,1,0,1, },
                { 1,5,0,0,0,0,0,0,1,0,0,0,0,6,0,0,7,0,1,6,6,6,6,6,6,0,0,1, },
                { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 }
               
            };
            
            // Level wird gewechselt
            for (int i = 0; i < 28; i++)
                for (int j = 0;j < 28;j++)
            LVL_data[i][j] = LVL5[i][j];
            break;
            default :
                // nichts, letztes Level wird unendlich lang gespielt
            break;
        }
    }
    
    
    public void GenerateLevel()
    {
        Coins = 0;
        Objects = 0;

        int px = TILESIZE/2,
            py = TILESIZE/2;
        
        

        for (int i = 0 ; i < 28; i++)
        {
            
            for (int j = 0 ; j < 28; j++)
            {
                int ID = LVL_data[i][j] ;
                
                if (ID >= 1 && 
                    ID <= 3)
                {

                     addObject( new Block(ID), px, py );
                     Objects++;
                }
                else
                if (ID == 4)
                {
                     addObject( new Box(), px, py );
                     Objects++;
                }
                else
                if (ID == 5)
                {

                     addObject( Player, px, py );
                     Objects++;
                }
                else
                if (ID == 6)
                {
                     addObject( new Coin(), px, py );
                     Coins++;
                     Objects++;
                }
                else
                if (ID == 7 || ID == 8)
                {
                    addObject ( new Enemy(ID), px, py);
                    Objects++;
                }

                px += TILESIZE;
            }
            
            px = TILESIZE/2;
            py += TILESIZE;
        }
        
        maploaded = true;
    }
    
    
    public void act()
    {
        
        // System.out.print("Number : " + numberOfObjects() + "\nREqu : " + (Objects));
        if (numberOfObjects() == Objects - Coins && maploaded || retry)
        {
            // Spieler einfrieren
            Player gPlayer = (Player)Player;
            gPlayer.Freeze(true);
            addObject(dummy, 0, 0);
            
            // Greenfootgeschw. erhï¿½hen
            Greenfoot.setSpeed(70);
            
        }
        
        if (numberOfObjects() == 1)
        {
            removeObject(dummy);
            Allobjectsdestroyed = true;
            Player gPlayer = (Player)Player;
            gPlayer.Freeze(false);
            
            // Greenfootgeschw. wieder auf "normal"
            Greenfoot.setSpeed(50);
        }
        
        if (Allobjectsdestroyed)
        {
            Allobjectsdestroyed = false;
            
            if (!retry)
            Level++;
            
            retry = false;
            
            ChangeLevel(Level);
            
            GenerateLevel();
        }
    }
    
    public boolean isSolid(int x, int y)
    {
        // convert
        x/=TILESIZE;
        y/=TILESIZE;
        
        if (x < 0 || x >= 28 || y < 0 || y >= 28 )
        
        return true;
        
        switch (LVL_data[y][x])
        {
            case 1 :
            case 2 :
            
            return true; 
            
            default : return false; 
        }   
    }
    
    public boolean onSpike(int x, int y)
    {
        // convert
        int px = x/TILESIZE;
        int py = y/TILESIZE;
        
        if (px < 0 || px >= 28 || py < 0 || py >= 28 )
        return false;
        
        switch (LVL_data[py][px])
        {
            case 3 :
            
            if (y >= py * TILESIZE + 10) // spieler ist mehr als zur Hï¿½lfte auf den Stacheln
            return true;
            else
            return false;
            
            default : return false; 
        }   
    }
    
    
    

}